-- Create bookings table
CREATE TABLE public.bookings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  collection_date TIMESTAMPTZ NOT NULL,
  collection_time_slot TEXT NOT NULL,
  status TEXT DEFAULT 'awaiting_assignment' NOT NULL,
  services_config JSONB NOT NULL,
  total_price NUMERIC(10, 2) NOT NULL,
  special_instructions TEXT,
  stain_images TEXT[],
  washer_id UUID REFERENCES auth.users(id),
  cancellation_policy_agreed BOOLEAN DEFAULT TRUE,
  terms_agreed BOOLEAN DEFAULT TRUE
);

-- Enable Row Level Security
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;

-- Create policies for users to manage their own bookings
CREATE POLICY "Users can create their own bookings."
  ON public.bookings FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own bookings."
  ON public.bookings FOR SELECT
  USING (auth.uid() = user_id);

-- Create policy for washers to view assigned bookings
CREATE POLICY "Washers can view assigned bookings."
  ON public.bookings FOR SELECT
  USING (auth.uid() = washer_id);

-- Create policy for admins to manage all bookings
CREATE POLICY "Admins can manage all bookings."
  ON public.bookings FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM auth.users 
      WHERE auth.users.id = auth.uid() 
      AND auth.users.raw_user_meta_data->>'role' = 'admin'
    )
  );

-- Create index for better performance
CREATE INDEX idx_bookings_user_id ON public.bookings(user_id);
CREATE INDEX idx_bookings_washer_id ON public.bookings(washer_id);
CREATE INDEX idx_bookings_status ON public.bookings(status);
CREATE INDEX idx_bookings_collection_date ON public.bookings(collection_date); 