-- Create comprehensive payout system tables
-- This migration creates the foundation for a secure, admin-controlled payout system

-- 1. Create earnings table to track individual booking earnings
CREATE TABLE public.earnings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    booking_id BIGINT REFERENCES public.bookings(id) NOT NULL UNIQUE,
    washer_id UUID REFERENCES auth.users(id) NOT NULL,
    
    -- Financial details
    booking_total NUMERIC(10, 2) NOT NULL, -- Total amount customer paid
    platform_fee NUMERIC(10, 2) NOT NULL, -- Platform's cut (15%)
    washer_earnings NUMERIC(10, 2) NOT NULL, -- What washer earned after platform fee
    
    -- Status tracking
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'available', 'processing', 'paid')),
    
    -- Timestamps
    earned_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    made_available_at TIMESTAMPTZ, -- When booking was completed and funds became available
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 2. Create payout requests table for washer-initiated withdrawal requests
CREATE TABLE public.payout_requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    washer_id UUID REFERENCES auth.users(id) NOT NULL,
    
    -- Request details
    requested_amount NUMERIC(10, 2) NOT NULL CHECK (requested_amount > 0),
    withdrawal_fee NUMERIC(10, 2) NOT NULL DEFAULT 2.50, -- £2.50 flat fee
    net_amount NUMERIC(10, 2) NOT NULL, -- Amount after withdrawal fee
    
    -- Status and processing
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected', 'processing', 'completed', 'failed')),
    admin_notes TEXT,
    
    -- Payment processing details
    stripe_transfer_id TEXT, -- Stripe transfer ID when processed
    processed_by UUID REFERENCES auth.users(id), -- Admin who processed
    processed_at TIMESTAMPTZ,
    
    -- Request metadata
    request_notes TEXT, -- Washer's optional notes
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 3. Create washer account balances view for easy balance calculation
CREATE VIEW public.washer_balances AS
SELECT 
    w.id as washer_id,
    w.full_name,
    w.email,
    COALESCE(SUM(e.washer_earnings) FILTER (WHERE e.status = 'available'), 0) as available_balance,
    COALESCE(SUM(e.washer_earnings) FILTER (WHERE e.status = 'processing'), 0) as processing_balance,
    COALESCE(SUM(e.washer_earnings) FILTER (WHERE e.status = 'paid'), 0) as total_paid_out,
    COALESCE(SUM(e.washer_earnings), 0) as total_earnings,
    COUNT(e.id) FILTER (WHERE e.status = 'available') as available_bookings_count
FROM public.profiles w
LEFT JOIN public.earnings e ON w.id = e.washer_id
WHERE w.role = 'washer'
GROUP BY w.id, w.full_name, w.email;

-- 4. Create indexes for optimal performance
CREATE INDEX idx_earnings_washer_id ON public.earnings(washer_id);
CREATE INDEX idx_earnings_status ON public.earnings(status);
CREATE INDEX idx_earnings_booking_id ON public.earnings(booking_id);
CREATE INDEX idx_earnings_made_available_at ON public.earnings(made_available_at);

CREATE INDEX idx_payout_requests_washer_id ON public.payout_requests(washer_id);
CREATE INDEX idx_payout_requests_status ON public.payout_requests(status);
CREATE INDEX idx_payout_requests_created_at ON public.payout_requests(created_at);
CREATE INDEX idx_payout_requests_processed_by ON public.payout_requests(processed_by);

-- 5. Enable Row Level Security
ALTER TABLE public.earnings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payout_requests ENABLE ROW LEVEL SECURITY;

-- 6. Create RLS policies for earnings
CREATE POLICY "Washers can view their own earnings"
ON public.earnings FOR SELECT
USING (auth.uid() = washer_id);

CREATE POLICY "Admins can view all earnings"
ON public.earnings FOR SELECT
USING (
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE profiles.id = auth.uid() 
        AND profiles.role = 'admin'
    )
);

CREATE POLICY "System can insert earnings"
ON public.earnings FOR INSERT
WITH CHECK (true); -- This will be controlled by server-side functions

CREATE POLICY "Admins can update earnings"
ON public.earnings FOR UPDATE
USING (
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE profiles.id = auth.uid() 
        AND profiles.role = 'admin'
    )
);

-- 7. Create RLS policies for payout requests
CREATE POLICY "Washers can view their own payout requests"
ON public.payout_requests FOR SELECT
USING (auth.uid() = washer_id);

CREATE POLICY "Washers can create their own payout requests"
ON public.payout_requests FOR INSERT
WITH CHECK (auth.uid() = washer_id);

CREATE POLICY "Admins can view all payout requests"
ON public.payout_requests FOR SELECT
USING (
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE profiles.id = auth.uid() 
        AND profiles.role = 'admin'
    )
);

CREATE POLICY "Admins can update payout requests"
ON public.payout_requests FOR UPDATE
USING (
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE profiles.id = auth.uid() 
        AND profiles.role = 'admin'
    )
);

-- 8. Create function to automatically create earnings when booking is completed
CREATE OR REPLACE FUNCTION public.create_earnings_for_completed_booking()
RETURNS TRIGGER AS $$
DECLARE
    platform_fee_rate NUMERIC := 0.15; -- 15% platform fee
    calculated_platform_fee NUMERIC;
    calculated_washer_earnings NUMERIC;
BEGIN
    -- Only create earnings when booking status changes to 'completed'
    IF NEW.status = 'completed' AND (OLD.status IS NULL OR OLD.status != 'completed') THEN
        -- Calculate fees
        calculated_platform_fee := NEW.total_price * platform_fee_rate;
        calculated_washer_earnings := NEW.total_price - calculated_platform_fee;
        
        -- Insert earnings record
        INSERT INTO public.earnings (
            booking_id,
            washer_id,
            booking_total,
            platform_fee,
            washer_earnings,
            status,
            made_available_at
        ) VALUES (
            NEW.id,
            NEW.washer_id,
            NEW.total_price,
            calculated_platform_fee,
            calculated_washer_earnings,
            'available', -- Immediately available for withdrawal
            NOW()
        );
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 9. Create trigger to automatically create earnings
CREATE TRIGGER trigger_create_earnings_on_booking_completion
    AFTER UPDATE ON public.bookings
    FOR EACH ROW
    EXECUTE FUNCTION public.create_earnings_for_completed_booking();

-- 10. Create function to calculate minimum payout amount
CREATE OR REPLACE FUNCTION public.get_minimum_payout_amount()
RETURNS NUMERIC AS $$
BEGIN
    -- Minimum payout is £10 to make withdrawal fee worthwhile
    RETURN 10.00;
END;
$$ LANGUAGE plpgsql;

-- 11. Add comments for documentation
COMMENT ON TABLE public.earnings IS 'Individual booking earnings for washers, automatically created when bookings are completed';
COMMENT ON TABLE public.payout_requests IS 'Washer-initiated requests to withdraw their available earnings';
COMMENT ON VIEW public.washer_balances IS 'Calculated view of each washer''s balance and earnings summary';

COMMENT ON COLUMN public.earnings.status IS 'pending: booking not yet completed, available: ready for withdrawal, processing: included in payout request, paid: already paid out';
COMMENT ON COLUMN public.payout_requests.status IS 'pending: awaiting admin review, approved: ready for processing, processing: being processed, completed: successfully paid, failed: payment failed, rejected: rejected by admin';
COMMENT ON COLUMN public.payout_requests.withdrawal_fee IS 'Fixed £2.50 withdrawal fee charged per payout request';
COMMENT ON COLUMN public.payout_requests.net_amount IS 'Amount washer receives after withdrawal fee is deducted'; 